/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKEPROM_H
#define _MOCKEPROM_H

#include "../unit/unity.h"
#include "../eprom.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

#ifdef __cplusplus
extern "C" {
#endif

void Mockeprom_Init(void);
void Mockeprom_Destroy(void);
void Mockeprom_Verify(void);




#define eprom_read_serial_id_IgnoreAndReturn(cmock_retval) eprom_read_serial_id_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eprom_read_serial_id_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t* cmock_to_return);
#define eprom_read_serial_id_StopIgnore() eprom_read_serial_id_CMockStopIgnore()
void eprom_read_serial_id_CMockStopIgnore(void);
#define eprom_read_serial_id_ExpectAndReturn(cmock_retval) eprom_read_serial_id_CMockExpectAndReturn(__LINE__, cmock_retval)
void eprom_read_serial_id_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t* cmock_to_return);
typedef uint8_t* (* CMOCK_eprom_read_serial_id_CALLBACK)(int cmock_num_calls);
void eprom_read_serial_id_AddCallback(CMOCK_eprom_read_serial_id_CALLBACK Callback);
void eprom_read_serial_id_Stub(CMOCK_eprom_read_serial_id_CALLBACK Callback);
#define eprom_read_serial_id_StubWithCallback eprom_read_serial_id_Stub
#define eprom_write_addr_Ignore() eprom_write_addr_CMockIgnore()
void eprom_write_addr_CMockIgnore(void);
#define eprom_write_addr_StopIgnore() eprom_write_addr_CMockStopIgnore()
void eprom_write_addr_CMockStopIgnore(void);
#define eprom_write_addr_Expect(addr) eprom_write_addr_CMockExpect(__LINE__, addr)
void eprom_write_addr_CMockExpect(UNITY_LINE_TYPE cmock_line, uint64_t* addr);
typedef void (* CMOCK_eprom_write_addr_CALLBACK)(uint64_t* addr, int cmock_num_calls);
void eprom_write_addr_AddCallback(CMOCK_eprom_write_addr_CALLBACK Callback);
void eprom_write_addr_Stub(CMOCK_eprom_write_addr_CALLBACK Callback);
#define eprom_write_addr_StubWithCallback eprom_write_addr_Stub
#define eprom_write_addr_ReturnThruPtr_addr(addr) eprom_write_addr_CMockReturnMemThruPtr_addr(__LINE__, addr, sizeof(uint64_t))
#define eprom_write_addr_ReturnArrayThruPtr_addr(addr, cmock_len) eprom_write_addr_CMockReturnMemThruPtr_addr(__LINE__, addr, cmock_len * sizeof(*addr))
#define eprom_write_addr_ReturnMemThruPtr_addr(addr, cmock_size) eprom_write_addr_CMockReturnMemThruPtr_addr(__LINE__, addr, cmock_size)
void eprom_write_addr_CMockReturnMemThruPtr_addr(UNITY_LINE_TYPE cmock_line, uint64_t* addr, size_t cmock_size);
#define eprom_read_addr_Ignore() eprom_read_addr_CMockIgnore()
void eprom_read_addr_CMockIgnore(void);
#define eprom_read_addr_StopIgnore() eprom_read_addr_CMockStopIgnore()
void eprom_read_addr_CMockStopIgnore(void);
#define eprom_read_addr_Expect(addr) eprom_read_addr_CMockExpect(__LINE__, addr)
void eprom_read_addr_CMockExpect(UNITY_LINE_TYPE cmock_line, uint64_t* addr);
typedef void (* CMOCK_eprom_read_addr_CALLBACK)(uint64_t* addr, int cmock_num_calls);
void eprom_read_addr_AddCallback(CMOCK_eprom_read_addr_CALLBACK Callback);
void eprom_read_addr_Stub(CMOCK_eprom_read_addr_CALLBACK Callback);
#define eprom_read_addr_StubWithCallback eprom_read_addr_Stub
#define eprom_read_addr_ReturnThruPtr_addr(addr) eprom_read_addr_CMockReturnMemThruPtr_addr(__LINE__, addr, sizeof(uint64_t))
#define eprom_read_addr_ReturnArrayThruPtr_addr(addr, cmock_len) eprom_read_addr_CMockReturnMemThruPtr_addr(__LINE__, addr, cmock_len * sizeof(*addr))
#define eprom_read_addr_ReturnMemThruPtr_addr(addr, cmock_size) eprom_read_addr_CMockReturnMemThruPtr_addr(__LINE__, addr, cmock_size)
void eprom_read_addr_CMockReturnMemThruPtr_addr(UNITY_LINE_TYPE cmock_line, uint64_t* addr, size_t cmock_size);

#ifdef __cplusplus
}
#endif

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
